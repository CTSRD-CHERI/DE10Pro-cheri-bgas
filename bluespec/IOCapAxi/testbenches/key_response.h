// Autogenerated by generate_bitfield.py
// Requires <cstdint> and <array>, does not include them by default because this file may be included inside of a namespace

struct Tuple2_KeyId_MaybeKey {
	/** 8-bit field */
	uint8_t keyId;
	/** 1-bit field */
	uint8_t keyValid;
	/** 64-bit field */
	uint64_t keyTop;
	/** 64-bit field */
	uint64_t keyBot;

	static Tuple2_KeyId_MaybeKey unpack(const std::array<uint32_t, 5>& backing) {
		Tuple2_KeyId_MaybeKey value{};
		value.keyId = (
			uint8_t((backing[0] >> 0u) & 0xffu)
		);
		value.keyValid = (
			uint8_t((backing[0] >> 8u) & 0x1u)
		);
		value.keyTop = (
			(uint64_t((backing[0] >> 9u) & 0x7fffffu) << 0) | 
			(uint64_t((backing[1] >> 0u) & 0xffffffffu) << 23) | 
			(uint64_t((backing[2] >> 0u) & 0x1ffu) << 55)
		);
		value.keyBot = (
			(uint64_t((backing[2] >> 9u) & 0x7fffffu) << 0) | 
			(uint64_t((backing[3] >> 0u) & 0xffffffffu) << 23) | 
			(uint64_t((backing[4] >> 0u) & 0x1ffu) << 55)
		);
		return value;
	}
	std::array<uint32_t, 5> pack() const {
		std::array<uint32_t, 5> backing{};
		backing[0] = (
			(uint32_t((keyId >> 0u) & uint8_t(0xfful)) << 0) | 
			(uint32_t((keyValid >> 0u) & uint8_t(0x1ul)) << 8) | 
			(uint32_t((keyTop >> 0u) & 0x7ffffful) << 9)
		);
		backing[1] = (
			uint32_t((keyTop >> 23u) & 0xfffffffful)
		);
		backing[2] = (
			(uint32_t((keyTop >> 55u) & 0x1fful) << 0) | 
			(uint32_t((keyBot >> 0u) & 0x7ffffful) << 9)
		);
		backing[3] = (
			uint32_t((keyBot >> 23u) & 0xfffffffful)
		);
		backing[4] = (
			uint32_t((keyBot >> 55u) & 0x1fful)
		);
		return backing;
	}
	
};

